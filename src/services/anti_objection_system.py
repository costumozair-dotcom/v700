#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Sistema Anti-Obje√ß√£o
Sistema avan√ßado para identifica√ß√£o e neutraliza√ß√£o de obje√ß√µes
"""

import logging
import json
import asyncio
from datetime import datetime
from typing import Dict, List, Optional, Any
from services.ai_manager import ai_manager

logger = logging.getLogger(__name__)

class AntiObjectionSystem:
    """Sistema especializado em neutraliza√ß√£o de obje√ß√µes"""

    def __init__(self):
        self.objecoes_universais = {
            "TEMPO": {
                "categoria": "Recurso",
                "manifestacoes": ["N√£o tenho tempo", "Muito ocupado", "Talvez mais tarde"],
                "raiz_emocional": "Medo de mais compromissos"
            },
            "DINHEIRO": {
                "categoria": "Financeira",
                "manifestacoes": ["Muito caro", "Sem or√ßamento", "Preciso pensar"],
                "raiz_emocional": "Medo de perda financeira"
            },
            "CONFIANCA": {
                "categoria": "Credibilidade",
                "manifestacoes": ["N√£o conhe√ßo voc√™s", "Parece bom demais", "J√° fui enganado"],
                "raiz_emocional": "Medo de ser enganado"
            },
            "AUTOSSUFICIENCIA": {
                "categoria": "Ego",
                "manifestacoes": ["Consigo sozinho", "J√° tentei tudo", "Conhe√ßo o assunto"],
                "raiz_emocional": "Medo de admitir fragilidade"
            },
            "TIMING": {
                "categoria": "Circunstancial",
                "manifestacoes": ["N√£o √© o momento", "Muita coisa acontecendo", "Depois resolvo"],
                "raiz_emocional": "Medo da mudan√ßa"
            },
            "COMPLEXIDADE": {
                "categoria": "Capacidade",
                "manifestacoes": ["Parece complicado", "N√£o sei se conseguiria", "√â muito t√©cnico"],
                "raiz_emocional": "Medo de n√£o conseguir executar"
            }
        }

    async def create_comprehensive_anti_objection_system(self, dados_entrada: Dict[str, Any]) -> Dict[str, Any]:
        """M√âTODO PRINCIPAL - Cria sistema completo anti-obje√ß√£o personalizado"""
        try:
            logger.info("üõ°Ô∏è Iniciando cria√ß√£o do sistema anti-obje√ß√£o...")

            # Extrai dados de entrada
            avatar = dados_entrada.get('avatar', {})
            produto = dados_entrada.get('produto', 'Produto')
            funil = dados_entrada.get('funil_vendas', {})
            pesquisas = dados_entrada.get('pesquisas', [])
            historico_objecoes = dados_entrada.get('historico_objecoes', [])

            # An√°lise psicol√≥gica da audi√™ncia
            perfil_psicologico = await self._analisar_perfil_psicologico(avatar, pesquisas)

            # Diagn√≥stico completo de obje√ß√µes
            diagnostico_objecoes = await self._diagnosticar_objecoes(
                avatar, historico_objecoes, pesquisas
            )

            # Desenvolvimento de arsenal de drivers mentais
            arsenal_drivers = await self._criar_arsenal_drivers_mentais(
                diagnostico_objecoes, perfil_psicologico, produto
            )

            # Sistema de implementa√ß√£o
            sistema_implementacao = await self._criar_sistema_implementacao(
                arsenal_drivers, funil, avatar
            )

            # Kit de emerg√™ncia
            kit_emergencia = await self._criar_kit_emergencia(
                diagnostico_objecoes, arsenal_drivers
            )

            sistema_completo = {
                "produto": produto,
                "timestamp": datetime.now().isoformat(),
                "resumo_executivo": await self._criar_resumo_executivo(
                    perfil_psicologico, diagnostico_objecoes, arsenal_drivers
                ),
                "analise_psicologica_detalhada": perfil_psicologico,
                "diagnostico_objecoes": diagnostico_objecoes,
                "arsenal_drivers_mentais": arsenal_drivers,
                "sistema_implementacao": sistema_implementacao,
                "kit_emergencia": kit_emergencia,
                "metricas_eficacia": await self._definir_metricas_eficacia()
            }

            logger.info("‚úÖ Sistema anti-obje√ß√£o criado com sucesso")
            return sistema_completo

        except Exception as e:
            logger.error(f"‚ùå Erro ao criar sistema anti-obje√ß√£o: {e}")
            return self._create_fallback_system(str(e))

    async def criar_sistema_anti_objecao(self, dados_entrada: Dict[str, Any]) -> Dict[str, Any]:
        """M√©todo alternativo - chama o m√©todo principal"""
        return await self.create_comprehensive_anti_objection_system(dados_entrada)

    def _create_fallback_system(self, error_msg: str) -> Dict[str, Any]:
        """Cria sistema anti-obje√ß√£o b√°sico em caso de falha"""
        return {
            'status': 'fallback',
            'sistema_anti_objecao': {
                'objecoes_mapeadas': [
                    'Pre√ßo alto',
                    'Falta de confian√ßa',
                    'Complexidade da solu√ß√£o',
                    'Falta de tempo',
                    'Compara√ß√£o com concorrentes'
                ],
                'respostas_preparadas': [
                    'Demonstra√ß√£o de ROI e valor agregado',
                    'Apresenta√ß√£o de casos de sucesso e depoimentos',
                    'Explica√ß√£o simplificada do processo',
                    'Proposta de implementa√ß√£o gradual',
                    'An√°lise comparativa de diferenciais'
                ],
                'estrategias_aplicacao': [
                    'Usar prova social',
                    'Mostrar garantias',
                    'Oferecer teste gratuito',
                    'Apresentar plano de implementa√ß√£o',
                    'Destacar exclusividade'
                ]
            },
            'error_details': error_msg,
            'fallback_used': True,
            'timestamp': datetime.now().isoformat()
        }

    async def _analisar_perfil_psicologico(self, avatar: Dict, pesquisas: List) -> Dict[str, Any]:
        """An√°lise psicol√≥gica profunda da audi√™ncia"""

        prompt = f"""
        Como ESPECIALISTA EM PSICOLOGIA DE VENDAS, analise o perfil psicol√≥gico para identificar padr√µes de obje√ß√£o:

        AVATAR: {json.dumps(avatar, indent=2)}
        PESQUISAS: {json.dumps(pesquisas[:3], indent=2) if pesquisas else "N√£o dispon√≠vel"}

        Forne√ßa an√°lise psicol√≥gica estruturada:

        1. PERFIL PSICOL√ìGICO DA AUDI√äNCIA
        - Tra√ßos de personalidade dominantes
        - Padr√µes de tomada de decis√£o
        - N√≠veis de resist√™ncia t√≠picos
        - Mecanismos de defesa mais comuns

        2. TOP 3 OBJE√á√ïES MAIS CR√çTICAS
        - Obje√ß√µes verbalizadas com mais frequ√™ncia
        - Intensidade emocional de cada obje√ß√£o
        - Momento t√≠pico de manifesta√ß√£o
        - Raiz psicol√≥gica profunda

        3. ESTRAT√âGIA GERAL DE NEUTRALIZA√á√ÉO
        - Abordagem psicol√≥gica mais eficaz
        - Sequ√™ncia ideal de neutraliza√ß√£o
        - Tom e linguagem recomendados
        - Momentos estrat√©gicos de interven√ß√£o

        4. MOMENTOS CR√çTICOS DO LAN√áAMENTO
        - Quando as obje√ß√µes s√£o mais prov√°veis
        - Pontos de maior resist√™ncia
        - Oportunidades de preven√ß√£o
        - Sinais de alerta para monitorar

        Seja visceral e baseado em psicologia profunda.
        """

        try:
            resposta = ai_manager.generate_analysis(prompt, modelo_preferido="gemini")
            return {
                "analise_completa": resposta,
                "processado_em": datetime.now().isoformat(),
                "dados_analisados": len(pesquisas)
            }
        except Exception as e:
            logger.error(f"Erro na an√°lise psicol√≥gica: {e}")
            return {
                "erro": str(e),
                "analise_fallback": "An√°lise psicol√≥gica b√°sica: Avatar t√≠pico de mercado B2B/B2C com resist√™ncias padr√£o relacionadas a pre√ßo, tempo e confian√ßa."
            }

    async def _diagnosticar_objecoes(self, avatar: Dict, historico: List, pesquisas: List) -> Dict[str, Any]:
        """Diagn√≥stico completo das obje√ß√µes universais e ocultas"""

        prompt = f"""
        Como ESPECIALISTA EM PSICOLOGIA DE VENDAS, realize diagn√≥stico forense das obje√ß√µes:

        AVATAR: {json.dumps(avatar, indent=2)}
        HIST√ìRICO DE OBJE√á√ïES: {json.dumps(historico, indent=2) if historico else "N√£o dispon√≠vel"}
        PESQUISAS: {json.dumps(pesquisas[:3], indent=2) if pesquisas else "N√£o dispon√≠vel"}

        OBJE√á√ïES UNIVERSAIS CONHECIDAS:
        {json.dumps(self.objecoes_universais, indent=2)}

        Realize an√°lise forense completa:

        1. MAPEAMENTO EMOCIONAL DAS RESPOSTAS
        - Como cada obje√ß√£o se manifesta emocionalmente
        - Linguagem corporal e verbal t√≠pica
        - Estados emocionais associados
        - Intensidade de cada rea√ß√£o

        2. IDENTIFICA√á√ÉO DE PADR√ïES COMPORTAMENTAIS
        - Sequ√™ncia t√≠pica de obje√ß√µes
        - Padr√µes de escalada
        - Comportamentos de evita√ß√£o
        - Sinais precursores

        3. DIAGN√ìSTICO DAS OBJE√á√ïES UNIVERSAIS
        - Quais das obje√ß√µes universais s√£o mais relevantes
        - Como se manifestam especificamente neste avatar
        - Frequ√™ncia e intensidade de cada uma
        - Momentos de maior probabilidade

        4. DIAGN√ìSTICO DAS OBJE√á√ïES OCULTAS
        - Obje√ß√µes n√£o verbalizadas
        - Resist√™ncias subconscientes
        - Medos n√£o admitidos
        - Autossabotagens t√≠picas

        5. PERFIS/PERSONAS PRINCIPAIS
        - Diferentes tipos dentro do avatar
        - Obje√ß√µes espec√≠ficas por perfil
        - Estrat√©gias diferenciadas necess√°rias
        - Hierarquia de resist√™ncia

        Seja extremamente detalhado e psicologicamente profundo.
        """

        try:
            resposta = ai_manager.generate_analysis(prompt, modelo_preferido="gemini")
            return {
                "diagnostico_completo": resposta,
                "objecoes_mapeadas": len(self.objecoes_universais),
                "processado_em": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro no diagn√≥stico de obje√ß√µes: {e}")
            return {
                "erro": str(e),
                "diagnostico_fallback": "Diagn√≥stico b√°sico: Obje√ß√µes universais aplic√°veis - TEMPO, DINHEIRO, CONFIAN√áA como principais resist√™ncias."
            }

    async def _criar_arsenal_drivers_mentais(self, diagnostico: Dict, perfil: Dict, produto: str) -> Dict[str, Any]:
        """Cria arsenal completo de drivers mentais anti-obje√ß√£o"""

        prompt = f"""
        Como ESPECIALISTA EM PSICOLOGIA DE VENDAS, crie arsenal de drivers mentais:

        PRODUTO: {produto}
        DIAGN√ìSTICO: {json.dumps(diagnostico, indent=2)}
        PERFIL PSICOL√ìGICO: {json.dumps(perfil, indent=2)}

        Crie 5+ DRIVERS MENTAIS ESPEC√çFICOS, cada um com:

        1. NOME IMPACTANTE DO DRIVER
        2. OBJE√á√ÉO-ALVO (qual obje√ß√£o neutraliza)
        3. GATILHO PSICOL√ìGICO CENTRAL
        4. MEC√ÇNICA DE FUNCIONAMENTO
        - Como funciona psicologicamente
        - Por que √© eficaz para este avatar
        - Timing ideal de aplica√ß√£o

        5. ROTEIRO COMPLETO DE INSTALA√á√ÉO
        - Setup (como introduzir)
        - Desenvolvimento (como implantar)
        - Cl√≠max (momento de m√°ximo impacto)
        - Ancoragem (como fixar)

        6. TEMPLATES E SCRIPTS PERSONALIZADOS
        - Scripts espec√≠ficos por situa√ß√£o
        - Varia√ß√µes por formato (CPL, webinar, live)
        - Frases de m√°ximo impacto
        - Palavras-gatilho espec√≠ficas

        7. HIST√ìRIAS E CASOS PARA CADA SITUA√á√ÉO
        - Narrativas que demonstram o conceito
        - Casos reais ou fict√≠cios relevantes
        - Provas sociais espec√≠ficas
        - Analogias poderosas

        8. LINGUAGEM ESPEC√çFICA PARA CADA PERFIL
        - Adapta√ß√µes por tipo de persona
        - Tom e estilo por situa√ß√£o
        - Palavras que ressoam
        - Termos que devem evitar

        Para cada driver, seja visceralmente espec√≠fico e acion√°vel.
        """

        try:
            resposta = ai_manager.generate_analysis(prompt, modelo_preferido="gemini")
            return {
                "arsenal_completo": resposta,
                "total_drivers": "5+",
                "criado_em": datetime.now().isoformat(),
                "produto": produto
            }
        except Exception as e:
            logger.error(f"Erro ao criar arsenal de drivers: {e}")
            return {
                "erro": str(e),
                "arsenal_fallback": "Arsenal b√°sico: Drivers de urg√™ncia, escassez, prova social, autoridade e reciprocidade adaptados ao produto."
            }

    async def _criar_sistema_implementacao(self, arsenal: Dict, funil: Dict, avatar: Dict) -> Dict[str, Any]:
        """Cria sistema completo de implementa√ß√£o"""

        prompt = f"""
        Como ESPECIALISTA EM PSICOLOGIA DE VENDAS, crie sistema de implementa√ß√£o:

        ARSENAL DE DRIVERS: {json.dumps(arsenal, indent=2)}
        FUNIL DE VENDAS: {json.dumps(funil, indent=2)}
        AVATAR: {json.dumps(avatar, indent=2)}

        Crie sistema com:

        1. CRONOGRAMA DE USO POR EST√ÅGIO
        - Que drivers usar em cada etapa do funil
        - Timing espec√≠fico de cada aplica√ß√£o
        - Sequ√™ncia psicol√≥gica otimizada
        - Intervalos entre aplica√ß√µes

        2. PERSONALIZA√á√ÉO POR PERSONA
        - Adapta√ß√µes para diferentes perfis
        - Intensidade por tipo de pessoa
        - Linguagem espec√≠fica
        - Abordagens diferenciadas

        3. ORDEM PSICOL√ìGICA IDEAL
        - Sequ√™ncia de m√°ximo impacto
        - Como escalar a intensidade
        - Momentos de refor√ßo
        - Protocolo de recupera√ß√£o

        4. M√âTRICAS DE EFIC√ÅCIA
        - Como medir sucesso de cada driver
        - Indicadores de resist√™ncia
        - Sinais de aceita√ß√£o
        - M√©tricas de convers√£o

        Seja extremamente pr√°tico e acion√°vel.
        """

        try:
            resposta = ai_manager.generate_analysis(prompt, modelo_preferido="gemini")
            return {
                "sistema_completo": resposta,
                "criado_em": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro ao criar sistema de implementa√ß√£o: {e}")
            return {
                "erro": str(e),
                "implementacao_fallback": "Sistema b√°sico: Aplica√ß√£o sequencial por est√°gio do funil com monitoramento de engajamento."
            }

    async def _criar_kit_emergencia(self, diagnostico: Dict, arsenal: Dict) -> Dict[str, Any]:
        """Cria kit de emerg√™ncia para obje√ß√µes de √∫ltima hora"""

        prompt = f"""
        Como ESPECIALISTA EM PSICOLOGIA DE VENDAS, crie kit de emerg√™ncia:

        DIAGN√ìSTICO: {json.dumps(diagnostico, indent=2)}
        ARSENAL: {json.dumps(arsenal, indent=2)}

        Crie kit com:

        1. OBJE√á√ïES DE √öLTIMA HORA
        - Obje√ß√µes t√≠picas no momento da decis√£o
        - Resist√™ncias de emerg√™ncia
        - Autossabotagens finais
        - Medos de comprador

        2. PRIMEIROS SOCORROS PSICOL√ìGICOS
        - Protocolos de resposta imediata
        - Como lidar com resist√™ncia intensa
        - T√©cnicas de desescalada
        - Estrat√©gias de reconex√£o

        3. SCRIPTS DE EMERG√äNCIA
        - Respostas prontas para cada situa√ß√£o
        - Frases de impacto imediato
        - Perguntas que quebram resist√™ncia
        - T√©cnicas de redirecionamento

        4. SINAIS DE ALERTA
        - Como identificar resist√™ncia crescente
        - Linguagem corporal de alerta
        - Padr√µes comportamentais problem√°ticos
        - Momentos de interven√ß√£o cr√≠tica

        Seja pr√°tico para situa√ß√µes de alta press√£o.
        """

        try:
            resposta = ai_manager.generate_analysis(prompt, modelo_preferido="gemini")
            return {
                "kit_completo": resposta,
                "criado_em": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro ao criar kit de emerg√™ncia: {e}")
            return {
                "erro": str(e),
                "kit_fallback": "Kit b√°sico: Respostas r√°pidas para obje√ß√µes de pre√ßo, tempo e decis√£o com t√©cnicas de fechamento."
            }

    async def _criar_resumo_executivo(self, perfil: Dict, diagnostico: Dict, arsenal: Dict) -> Dict[str, Any]:
        """Cria resumo executivo do sistema"""

        return {
            "visao_geral": "Sistema anti-obje√ß√£o personalizado criado com base em an√°lise psicol√≥gica profunda",
            "principais_objecoes": "Identificadas obje√ß√µes universais e ocultas espec√≠ficas do avatar",
            "arsenal_drivers": "Criados 5+ drivers mentais espec√≠ficos para neutraliza√ß√£o",
            "sistema_implementacao": "Protocolo completo de implementa√ß√£o por est√°gio do funil",
            "kit_emergencia": "Kit de primeiros socorros para situa√ß√µes cr√≠ticas",
            "nivel_personalizacao": "M√°ximo - adaptado especificamente para este avatar",
            "confiabilidade": "Alta - baseado em dados reais e an√°lise psicol√≥gica",
            "criado_em": datetime.now().isoformat()
        }

    async def _definir_metricas_eficacia(self) -> Dict[str, Any]:
        """Define m√©tricas de efic√°cia do sistema"""

        return {
            "metricas_primarias": [
                "Taxa de redu√ß√£o de obje√ß√µes por est√°gio",
                "Tempo m√©dio de neutraliza√ß√£o",
                "Taxa de convers√£o p√≥s-neutraliza√ß√£o",
                "N√≠vel de engajamento durante aplica√ß√£o"
            ],
            "metricas_secundarias": [
                "Qualidade da intera√ß√£o p√≥s-driver",
                "Feedback qualitativo dos prospects",
                "Taxa de reengajamento",
                "Progress√£o no funil ap√≥s neutraliza√ß√£o"
            ],
            "indicadores_comportamentais": [
                "Linguagem corporal (presencial)",
                "Engajamento no chat (online)",
                "Tempo de resposta a perguntas",
                "Qualidade das perguntas feitas"
            ],
            "protocolo_medicao": {
                "frequencia": "Por aplica√ß√£o de driver",
                "responsavel": "Equipe de vendas/apresentador",
                "ferramentas": "Observa√ß√£o direta + m√©tricas digitais",
                "relatorios": "Semanais com an√°lise de efic√°cia"
            }
        }

    # M√©todos auxiliares para compatibilidade
    async def generate_anti_objection_system(self, dados: Dict[str, Any]) -> Dict[str, Any]:
        """M√©todo de compatibilidade"""
        return await self.create_comprehensive_anti_objection_system(dados)

    async def create_objection_neutralization_system(self, dados: Dict[str, Any]) -> Dict[str, Any]:
        """M√©todo de compatibilidade"""
        return await self.create_comprehensive_anti_objection_system(dados)

# Inst√¢ncia global
anti_objection_engine = AntiObjectionSystem()
anti_objection_system = anti_objection_engine  # Export para compatibilidade